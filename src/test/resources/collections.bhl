
(doc list)
(list)
(list 1 2 "test")

(doc hash-set)
(hash-set)
(hash-set 1 2 "test" 1 "test")

(doc set)
(set)
(set (list 1 2 "test" 1 "test"))

(doc count)
(count false)
(count (list 1 2) 2)
(count nil)
(count (list))
(count (list 1 2 3))
(count (hash-set 1 2 "test" 1 "test"))
(count "test")

(doc first)
(first (list 1 2 3))
(first "test")
(first (hash-set 1 2 3))

(doc last)
(last (list 1 2 3))
(last "test")
(last (hash-set 1 2 3))

(doc nth)
(nth 5)
(nth 5 1)
(nth (list 1))
(nth (list 1) 1)
(nth (list 1) (- 1))
(nth (list 1) 0)
(nth (list 1 2 3) 1)
(nth "abc" 1)

(doc contains?)
(contains? (list 1 2 "test") "test")
(contains? (hash-set 1 2 "test" 1 "test") "test")
(contains? (hash-set) "xxx")
(contains? nil "xxx")

(doc conj)
(conj)
(conj 1)
(conj 1 1)
(conj 5 (list 1 2))
(conj 5 (list))
(conj 3 (hash-set 1 2))
(conj 3 (hash-set 1 2 3))
(conj 5 1)

(doc assoc)
(assoc (list 1 2 3) 1 "two")
(assoc (list 1 2 3) 3 "out of bounds")
(assoc nil 0 "zero")

(doc str)
(str)
(str nil)
(str 1 2 nil 3)
(str "hello" " " "world" "!")
(str "items: " (list 1 2 3))
