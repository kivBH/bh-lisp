; factorial using recursion
(defn fact-1 [a]
    (if (> a 1)
        (* a (fact-1 (- a 1)))
        1))
(fact-1 0)
(fact-1 3)
(fact-1 15)
(fact-1 "hello")

; factorial using functional programming
(defn fact-2 [n] (reduce * 1 (range 1 (inc n))))
(fact-2 0)
(fact-2 3)
(fact-2 15)
(fact-2 "hello")

; strings
(defn distinguish-number [n]
    (str n " is a " (if (>= n 0) "positive" "negative") " number"))
(distinguish-number 10)
(distinguish-number -5)

; Java interoperability
(. substring "hello world" 6)
(* 2 (. parseInt @java.lang.Integer "21"))

; exceptions
(try
    (+ (/ (+ 5 1) 0) 5)
    (catch @java.lang.ArithmeticException e
        (do
            (println "An error occurred...")
            (. getMessage e)))
    (finally
        (println "Executing finally...")))
