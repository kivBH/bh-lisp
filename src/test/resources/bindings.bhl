(doc let)
(let)
(let())
(let[])
(let [5] )
(let [5 5] )
(let [a 5] (+ a 1) (+ a 2))
(let [a 5] (+ a b))
(let [a "x"] (let [a "y"] (print a)) (print a))

(doc def)
(def)
(def ())
(def () ())
(def a ())
(def a (+ 1 2))
(def a 1 b)
(def a b)
(def a 1)
(def b 2 c a)
(+ a b c)

(doc defn)
(defn 5 5 5)
(defn func 5 5)
(defn func [] 5)
func
(func)
(func 5)

(doc fn)
(fn 5 5)
(fn [] "x")
((fn [x] x) "text")
((fn [x] x))

((def say-hello (fn [name]   (str "Hello " name))) "pepe")
say-hello
(say-hello "pepe")
((defn foo [a a c] (* a c)) 1 2 3)
(defn foo2 [a a c] (* a c))
(foo2 1 2 3)

(defn getName [] "bh")
(defn sayHello [name] (str "Hello " name))
(sayHello (getName))
(sayHello getName)
(defn sayHello [name] (str "Hello " (name)))
(sayHello getName)
(sayHello "xxx")