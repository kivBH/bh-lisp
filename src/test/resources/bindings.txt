(doc let)
>> [[binding*] exprs*] (binding => name value) Evaluates the exprs in a lexical context given by binding and returns the value of the last. If no expressions are supplied, returns nil.
(let)
>> ERROR: cz.bh.lisp.LispException: Exception while evaluating function 'let', on line: 2:
    java.lang.IllegalArgumentException: Expected number of parameters: 1+, but was: 0
(let())
>> ERROR: cz.bh.lisp.LispException: Exception while evaluating function 'let', on line: 3:
    java.lang.IllegalArgumentException: Expecting binding parameters in list literals []
(let[])
>> nil
(let [5] )
>> ERROR: cz.bh.lisp.LispException: Exception while evaluating function 'let', on line: 5:
    java.lang.IllegalArgumentException: Expected number of binding parameters is multiple of 2, but was: 1
(let [5 5] )
>> ERROR: cz.bh.lisp.LispException: Exception while evaluating function 'let', on line: 6:
    java.lang.IllegalArgumentException: Symbol expected in binding, but was: class cz.bh.lisp.parser.sexp.IntegerNode
(let [a 5] (+ a 1) (+ a 2))
>> 7
(let [a 5] (+ a b))
>> ERROR: cz.bh.lisp.LispException: Exception while evaluating function 'let', on line: 8:
    cz.bh.lisp.LispException: Exception while evaluating function '+', on line: 8:
    cz.bh.lisp.LispException: Symbol not defined: 'b', on line: 8
(let [a "x"] (let [a "y"] (print a)) (print a))
yx>> nil

(doc def)
>> [binding+] (binding => name value) Creates a global variable given by binding and returns the value of the last.
(def)
>> ERROR: cz.bh.lisp.LispException: Exception while evaluating function 'def', on line: 12:
    java.lang.IllegalArgumentException: Expected number of parameters: 2+, but was: 0
(def ())
>> ERROR: cz.bh.lisp.LispException: Exception while evaluating function 'def', on line: 13:
    java.lang.IllegalArgumentException: Expected number of parameters: 2+, but was: 1
(def () ())
>> ERROR: cz.bh.lisp.LispException: Exception while evaluating function 'def', on line: 14:
    java.lang.IllegalArgumentException: Symbol expected in binding, but was: class cz.bh.lisp.parser.sexp.ListNode
(def a ())
>> nil
(def a (+ 1 2))
>> 3
(def a 1 b)
>> ERROR: cz.bh.lisp.LispException: Exception while evaluating function 'def', on line: 17:
    java.lang.IllegalArgumentException: Expected number of parameters is multiple of 2, but was: 3
(def a b)
>> ERROR: cz.bh.lisp.LispException: Exception while evaluating function 'def', on line: 18:
    cz.bh.lisp.LispException: Symbol not defined: 'b', on line: 18
(def a 1)
>> 1
(def b 2 c a)
>> 1
(+ a b c)
>> 4

(doc defn)
>> [name [params*] body] Creates function with given name. Returns function.
(defn 5 5 5)
>> ERROR: cz.bh.lisp.LispException: Exception while evaluating function 'defn', on line: 24:
    java.lang.IllegalArgumentException: Symbol expected in binding, but was: class cz.bh.lisp.parser.sexp.IntegerNode
(defn func 5 5)
>> ERROR: cz.bh.lisp.LispException: Exception while evaluating function 'defn', on line: 25:
    java.lang.IllegalArgumentException: Expecting binding parameters in list literals []
(defn func [] 5)
>> UserDefinedFunction{name='func', paramNames=[], body=5}
func
>> UserDefinedFunction{name='func', paramNames=[], body=5}
(func)
>> 5
(func 5)
>> ERROR: cz.bh.lisp.LispException: Exception while evaluating function 'func', on line: 29:
    java.lang.IllegalArgumentException: Expected number of parameters: 0, but was: 1

(doc fn)
>> [[params*] body] Creates anonymous function and returns it.
(fn 5 5)
>> ERROR: cz.bh.lisp.LispException: Exception while evaluating function 'fn', on line: 32:
    java.lang.IllegalArgumentException: Expecting binding parameters in list literals []
(fn [] "x")
>> UserDefinedFunction{name='null', paramNames=[], body="x"}
((fn [x] x) "text")
>> text
((fn [x] x))
>> ERROR: cz.bh.lisp.LispException: Exception while evaluating function, on line: 35:
    java.lang.IllegalArgumentException: Expected number of parameters: 1, but was: 0

((def say-hello (fn [name]   (str "Hello " name))) "pepe")
>> Hello pepe
say-hello
>> UserDefinedFunction{name='null', paramNames=[name], body=(str "Hello " name)}
(say-hello "pepe")
>> Hello pepe
((defn foo [a a c] (* a c)) 1 2 3)
>> 6
(defn foo2 [a a c] (* a c))
>> UserDefinedFunction{name='foo2', paramNames=[a, a, c], body=(* a c)}
(foo2 1 2 3)
>> 6

